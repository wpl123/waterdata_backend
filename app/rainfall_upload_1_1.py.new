
import pymysql
import pandas as pd
import os, glob, datetime, csv
import logging

from datetime import date, timedelta
from dateutil.parser import parse
from dbutils import *
from flutils import *


    



def checkDate(y,m,d):
    # print (y, m, d)
    dte = '-'.join((y, m, d))

    if dte:
        try:
            parse(dte)
            return True
        except:
            return False
    return False
    




def rainfallFormat(mysql, meter_no, downloads_dir, uploads_dir):
    
    logging.info(' Data format started ' + datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S'))

    localdate = datetime.datetime.now().strftime('%Y-%m-%d')
    
    ldate = (datetime.datetime.today() - timedelta(days=1)).strftime('%Y%m%d')
    files = glob.glob(downloads_dir + meter_no + '*') #e.g.  /home/admin/dockers/waterdata_frontend/data/downloads/GQ967137.1.1.*

    if files == []:
        return None

    formatted_csvfile = uploads_dir + 'fmt_' + meter_no + '_' + ldate + '.csv'

    df1 = pd.concat([pd.read_csv(fp, skiprows=[34,35]).assign(meter_no=os.path.basename(fp)) for fp in files])
    
    print(df1)
    # initialise variables
    
    #mid = lastID(mysql, 'groundwater')
    mid = 0
    mn = ''
    rf_read1 = 0.0
    dy_read1 = 0.0
    QL_READ1 = "21"
    comments='Update'
    creation_date = localdate
    yr = datetime.datetime.now().year #  strftime('%Y')
    fields = []
    df11 = pd.DataFrame(columns=['read_date','rf_read1','ql_read1','comments','creation_date']) 

    

    for i in range(len(df1)):
        for c in range(len(df1.columns) - 1):       #strip off the meter_no
            if checkDate(str(yr),str((c + 1)),str(i)) == False:   #strip off bad dates e.g. 31.02.2020
                continue
         
            read_dte = datetime.datetime(yr,(c + 1),i).strftime('%Y-%m-%d')
            rf = df1.iloc[i,c]
         
            if pd.isna(df1.iloc[i,c]) == False:   # Not a nan
                df11.loc[(i + c)] = [read_dte,rf,QL_READ1,comments,creation_date] 
                # print(read_dte,rf,QL_READ1,comments,creation_date)
    
        df11 = df11.sort_values(by=['read_date'],axis=0)
        

    logging.info(' Data format ended ' + datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S'))
    return(formatted_csvfile)




def loadFormatted(mysql, meter_no, downloads_dir, uploads_dir, formatted_csvfile):

    logging.info(' Data load started ' + datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S'))
    
    df2 = pd.read_csv(formatted_csvfile, index_col=False, header=None, engine='python')

    i = 0
    
    with open(formatted_csvfile, 'r', newline='') as csvfile:
        
        for i in range(len(df2)):
            
            sql2 = ('''SELECT * FROM `rainfall` WHERE `meter_no` = '{0}' AND `read_date` = {1}''').format(df2.iloc[i,1], df2.iloc[i,2])
            dup_id = checkDuplicates(mysql, sql2)      # check for duplicates

            if dup_id == None:
                df2.iloc[i,0] = lastID(mysql, 'rainfall') + 1

                sql3 = (''' INSERT 
                            INTO `rainfall` (`id`, `meter_no`, `read_date`, 
                                    `rf_read1`, `dy_read1`, `ql_read1`, 
                                    `comments`, `creation_date`)VALUES ({0}, '{1}', {2}, {3}, {4}, {5}, {6}, {7}, {8}, '{9}', {10})
                            ''' ).format(df2.iloc[i,0], df2.iloc[i,1], df2.iloc[i,2], df2.iloc[i,3],df2.iloc[i,4],df2.iloc[i,5],df2.iloc[i,6],df2.iloc[i,7],df2.iloc[i,8],df2.iloc[i,9],df2.iloc[i,10])

                result2 = mysql.execSQL(sql3)          # insert row
                if result2 == False:
                    logging.error(' Insert failed meter_no:' + df2.iloc[i,1] + " date:" + df2.iloc[i,2] + " " + datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S'))
            else:
                logging.info(' Skipping duplicate id:' + str(dup_id) + " meter_no:" + df2.iloc[i,1] + " date:" + str(df2.iloc[i,2]) + " " + datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S'))
                
    return




def rainfallLoad(meter_no, downloads_dir, uploads_dir, logs_dir):

    setupLogging(meter_no, logs_dir)
    
    mysql = MySQLUtil()
    mysql.dbConnect(host ='192.168.11.6', user = 'root', psw = 'water', db_name = 'waterdata', port=30000)
    
    formatted_csvfile = rainfallFormat(mysql, meter_no, downloads_dir, uploads_dir)
    
    if formatted_csvfile != None:
        rf_load = loadFormatted(mysql, meter_no, downloads_dir, uploads_dir, formatted_csvfile)
        upd_meter = updateMeter(mysql, meter_no)     # update meter record with the read date

        # formatted_csvfile = uploads_dir + 'fmt_' + meter_no + '_20210121.csv'  #TODO
        download_hist = downloads_dir + 'download_hist'
        upload_hist   = uploads_dir + 'upload_hist'
        download_file = downloads_dir + meter_no + '*'
        upload_file   = formatted_csvfile


        move_download = moveFile(download_file, download_hist) # move formatted file and uploaded file to a new directory download_hist and upload_hist subdirectory
        move_upload   = moveFile(upload_file, upload_hist) # move formatted file and uploaded file to a new directory download_hist and upload_hist subdirectory
    else:
        logging.error('No download file for ' + meter_no + ' ' + datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S'))

    mysql.dbClose()

